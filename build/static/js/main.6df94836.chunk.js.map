{"version":3,"sources":["../node_modules/jspdf/dist sync","components/Table/index.jsx","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","EmployeeTable","React","useState","columns","title","field","type","data","name","department","role","state","setState","editable","onRowAdd","newData","Promise","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6df94836.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 315;","import React from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport default function EmployeeTable() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      { title: \"EmployeeID\", field: \"id\", type: \"numeric\" },\r\n      { title: \"Name\", field: \"name\" },\r\n      { title: \"Department\", field: \"department\" },\r\n      { title: \"Role\", field: \"role\" },\r\n    ],\r\n    data: [\r\n      { id: 1, name: \"Pablo Vazquez\", department: \"Field Operations\", role: \"Field Supervisor\" },\r\n      { id: 2, name: \"Edgar Guzman\", department: \"Field Operations\", role: \"EMT\" },\r\n      { id: 3, name: \"Marco Banuelos\", department: \"Dispatch\", role: \"Dispatcher\" },\r\n      { id: 4, name: \"Daniel Meza\", department: \"Dispatch\", role: \"Dispatcher\" },\r\n      { id: 5, name: \"Taryn West\", department: \"Billing\", role: \"Biller\" },\r\n      { id: 6, name: \"Briana Wilson\", department: \"Billing\", role: \"Biller\" },\r\n      { id: 7, name: \"Justin Ornelas\", department: \"Field Operations\", role: \"Paramedic\" },\r\n      { id: 8, name: \"Glen Cornejo\", department: \"Field Operations\", role: \"EMT\" },\r\n      { id: 9, name: \"Taylor Gratz\", department: \"Field Operations\", role: \"Paramedic\" },\r\n      { id: 10, name: \"Jesse Hernandez\", department: \"Dispatch\", role: \"Dispatcher\" },\r\n      { id: 11, name: \"Brian Napoli\", department: \"Management\", role: \"Supervisor\" },\r\n      { id: 12, name: \"Mark Baird\", department: \"Management\", role: \"Manager\" },\r\n      { id: 13, name: \"Jeff Cortez\", department: \"Field Operations\", role: \"EMT\" },\r\n      { id: 14, name: \"Gilbert Galindo\", department: \"Field Operations\", role: \"Registered Nurse\" },\r\n      { id: 15, name: \"Chris Guerrero\", department: \"Field Operations\", role: \"Registered Nurse\" },\r\n      { id: 16, name: \"Paul Gomez\", department: \"Field Operations\", role: \"Paramedic\" },\r\n      { id: 17, name: \"Boris Krutnog\", department: \"Management\", role: \"CEO\" },\r\n      { id: 18, name: \"Elizabeth Zey\", department: \"Field Operations\", role: \"Respiratory Therapist\" },\r\n      { id: 19, name: \"Leon Zombrano\", department: \"Field Operations\", role: \"Respiratory Therapist\" },\r\n      { id: 20, name: \"Andrew Cardenas\", department: \"Field Operations\", role: \"Respiratory Therapist\" }\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Employee React Directory\"\r\n      columns={state.columns}\r\n      data={state.data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.push(newData);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  return { ...prevState, data };\r\n                });\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\nimport EmployeeTable from \"./components/Table/index\";\n\nfunction App() {\n  return <EmployeeTable />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}